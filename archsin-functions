# vim: filetype=sh

WHITE="\e[01;37m";
NC="\e[0m";

function systemCheck {

    dmesg | grep efifb: &> /dev/null;

    if [[ $? == 0 ]]; then
        echo -e "EFI detected.\nInstallation script started!"
    else
        echo -e "MBR/DOS installation not yet supported!!\nExitting script!!";
        exit 1;
    fi

}

# Setting up install environment;
function getEnvironment {

        read -p "Country name for pacman mirrors: " COUNTRY;
        read -p "Timezone city: " CITY;
        read -p $'[\e[1;37mA\e[0m]uto or [\e[1;37mM\e[0m]anual partitioning ?[A/m]: ' PARTTYPE;
        : ${PARTTYPE:=A};

        lsblk --paths;
        read -p "Full path to the disk the OS will be installed to (/dev/sdx | /dev/nvme0nx): " INSTALLDISK;

        if [[ $INSTALLDISK == *[nvme]* ]]; then
            DISKLAYOUT=nvme-efiBTRFS.disk.layout;
            DISKPARTITION1="${INSTALLDISK}p1";
            DISKPARTITION2="${INSTALLDISK}p2";
        else
            DISKLAYOUT=efiBTRFS.disk.layout;
        fi

        #Pulling in Disk Layout file
        curl --remote-name "https://raw.githubusercontent.com/fluffehGit/archsin/master/DiskLayouts/${DISKLAYOUT}";

        if [[ -f privateRepoAPI.token ]]; then
            read REPOAPITOKEN < privateRepoAPI.token;
        else
            read -p "Input system configuration files repository API token: " REPOAPITOKEN;
        fi

        REPOAPITOKEN="Authorization: token ${REPOAPITOKEN}";

        if [[ -f privateRepo.name ]]; then
            read REPOID < privateRepo.name;
        else
            read -p "Input system configuration files repository name: " REPOID;
        fi

        read -p "Machine name (hostname): " HSTNAME;
        read -p "Machine username: " USRNAME;
        read -p "${USRNAME} password: " USRPASSWD;
        read -p "${USRNAME} groups (comma separated): " USRGROUPS;
        USRGROUPS=$(echo $USRGROUPS | tr --delete ' ');

<<blockComment
        read -p "Git username: " GITUSR;
        read -p "Git e-mail: " GITMAIL;
        read -p "Git root username: " GITROOTUSR;
        read -p "Git root e-mail: " GITROOTMAIL;
blockComment

}

function setMirrors {

    echo -e "\n${WHITE}Setting up mirrors...${NC}\n";

    pacman -Syy --noconfirm --needed reflector;
    reflector --save /etc/pacman.d/mirrorlist --sort rate --age 12 --fastest 30 --country $COUNTRY --protocol https;

}

function setDisk {

    echo -e "\n${WHITE}Setting up disk partitions...${NC}\n";

    # Partitioning disk
    if [[ $PARTTYPE == [Aa]* ]] ; then
        sed --in-place "s#/dev/sdx#${INSTALLDISK}#" $DISKLAYOUT;
        sfdisk $INSTALLDISK < $DISKLAYOUT;
    else
        echo -e "\n${WHITE}The script assumes you will be creating at least 2 partitions!!${NC}"
        fdisk $INSTALLDISK;
    fi

    # Formatting efi partition
    mkfs.fat -F32 $DISKPARTITION1;

    # Formatting main partition as BTRFS
    mkfs.btrfs $DISKPARTITION2;

    # Mounting main partition
    mount $DISKPARTITION2 /mnt;

    # Creating BTRFS Subvolumes
    btrfs subvolume create /mnt/@root;
    btrfs subvolume create /mnt/@home;
    btrfs subvolume create /mnt/@var;
    btrfs subvolume create /mnt/@srv;
    btrfs subvolume create /mnt/@opt;
    btrfs subvolume create /mnt/@tmp;
    btrfs subvolume create /mnt/@swap;
    btrfs subvolume create /mnt/@snapshots;

    # Unmounting BTRFS partition
    umount /mnt;

    # Mounting BTRFS @root Subvolume
    mount --options noatime,compress=zstd,space_cache,subvol=@root $DISKPARTITION2 /mnt;

    # Creating mount directories for all subvolumes
    mkdir /mnt/{boot,home,var,srv,opt,tmp,swap,.snapshots};

    # Mounting boot partition
    mount $DISKPARTITION2 /mnt/boot;

    # Mounting Subvolumes
    mount --options noatime,compress=zstd,space_cache,subvol=@home /dev/sda2 /mnt/home;
    mount --options noatime,compress=zstd,space_cache,subvol=@srv /dev/sda2 /mnt/srv;
    mount --options noatime,compress=zstd,space_cache,subvol=@tmp /dev/sda2 /mnt/tmp;
    mount --options noatime,compress=zstd,space_cache,subvol=@opt /dev/sda2 /mnt/opt;
    mount --options noatime,compress=zstd,space_cache,subvol=@snapshots /dev/sda2 /mnt/.snapshots;
    mount --options subvol=@swap /dev/sda2 /mnt/swap;
    mount --options subvol=@var /dev/sda2 /mnt/var;

    # Disabling CoW on swap and var
    chattr +C /mnt/swap;
    chattr +C /mnt/var;

}

function createSwap {

    echo -e "\n${WHITE}Creating swap file...${NC}\n";

    # Making Swap File as big as RAM in size
    dd if=/dev/zero \
        of=/swap/swapfile \
        bs=1K \
        count=$(cat /proc/meminfo | awk 'NR==1{print $2}') \
        status=progress;

    # Disabling compression
    btrfs property set /swap/swapfile compression none;

    chmod 600 /swap/swapfile;
    mkswap /swap/swapfile;
    swapon /swap/swapfile;
    echo -e "/swap/swapfile\tnone\tswap\tdefaults\t0 0" >> /etc/fstab;

}

function setLocale {

    echo -e "\n${WHITE}Setting up locale...${NC}\n";

    #Setting timezone
    LOCALZONE=$(timedatectl list-timezones | grep $1);
    ln --symbolic --force /usr/share/zoneinfo/$LOCALZONE /etc/localtime;
    hwclock --systohc;

    # Locale
    sed --in-place 's/#en_US.UTF-8*/en_US.UTF-8/' /etc/locale.gen;
    locale-gen;
    echo LANG=en_US.UTF-8 >> /etc/locale.conf;

}

function setHost {

    echo -e "\n${WHITE}Setting up machine name...${NC}\n";

    # Editing hostname and hosts file
    echo $1 > /etc/hostname;
    echo -e "127.0.0.1\tlocalhost" >> /etc/hosts;
    echo -e "::1\tlocalhost" >> /etc/hosts;
    echo -e "127.0.1.1\t${1}.localdomain\t${1}" >> /etc/hosts;

}

function setInitramfs {

    echo -e "\n${WHITE}Setting up initramfs...${NC}\n";

    # pulling mkinitcpio.conf
    curl --header "${1}" \
        --header "Accept: application/vnd.github.v3.raw" \
        "https://api.github.com/repos/fluffehGit/${2}/contents/etc/mkinitcpio.conf?ref=master" \
        --output /etc/mkinitcpio.conf;

    mkinitcpio --preset linux;

    # installing grub
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch_GRUB;

    # pulling grub default
    curl --header "${1}" \
        --header "Accept: application/vnd.github.v3.raw" \
        "https://api.github.com/repos/fluffehGit/${2}/contents/etc/default/grub?ref=master" \
        --output /etc/default/grub;

    # getting UUID of BTRFS partition where Swap file is located
    SWAPUUID=$(findmnt --noheadings --output UUID --target /swap/swapfile);

    # pulling in program that calculates file physical offset for BTRFS
    curl --remote-name "https://raw.githubusercontent.com/osandov/osandov-linux/master/scripts/btrfs_map_physical.c";

    # compiling
    gcc -O2 -o btrfs_map_physical btrfs_map_physical.c;

    # getting offset
    SWAPOFFSET=$(echo "\
        $(./btrfs_map_physical /swap/swapfile | awk 'NR==2 {print $9}') \
        / $(getconf PAGESIZE)" \
        | bc);

    # removing old settings
    sed --in-place '/GRUB_CMDLINE_LINUX_DEFAULT/d' /etc/default/grub;
    # adding new ones
    sed --in-place "s/#replace_in_script/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 resume=UUID=${SWAPUUID} resume_offset=${SWAPOFFSET}\"/" /etc/default/grub;

    grub-mkconfig --output /boot/grub/grub.cfg;

    shred --verbose -u --zero --iterations=3 btrfs_map_physical btrfs_map_physical.c;
}

function setUser {

    echo -e "\n${WHITE}Creating system user...${NC}\n";

    # Creating user
    useradd --create-home --groups $1 $2;
    chpasswd <<< $2:$3;
    sed --in-place 's/^#\s*\(%wheel\s*ALL=(ALL)\s*ALL\)/\1/' /etc/sudoers;
    visudo --check --file=/etc/sudoers;

}
