# vim: filetype=sh

function installPackages {

    echo "Installing packages from list...";

    # Updating packages
    pacman -Syyu;

    # pulling pacman.conf
    curl --header "${1}" \
        --header "Accept: application/vnd.github.v3.raw" \
        "https://api.github.com/repos/fluffehGit/${2}/contents/etc/pacman.conf?ref=master" \
        --output /etc/pacman.conf;

    # pulling package list
    curl --header "${1}" \
        --header "Accept: application/vnd.github.v3.raw" \
        --remote-name "https://api.github.com/repos/fluffehGit/${2}/contents/etc/pacman.d/pacman.pkgs";

    # Installing packages
    pacman -S --needed --noconfirm - < ./pacman.pkgs;

    # Removing install list
    shred --verbose -u --zero --iterations=3 ./pacman.pkgs;

}

function setDotFiles {

    echo "Pulling in configuration files...";

    mkdir /home/$1/.dotfiles;
    git clone --bare https://github.com/fluffehGit/dotfiles.git /home/$1/.dotfiles;
    rm --recursive --force /home/$1/.bash*;
    git --git-dir=/home/$1/.dotfiles --work-tree=/home/$1 checkout;
    git --git-dir=/home/$1/.dotfiles --work-tree=/home/$1 config --local status.showUntrackedFiles no;

}

function setAURWrapper {

    mkdir --parents $HOME/AUR/paru;
    git clone https://aur.archlinux.org/paru.git $HOME/AUR/paru;
    cd $HOME/AUR/paru;
    makepkg --syncdeps --install --rmdeps --clean --noconfirm;
    cd $HOME;

}

function setAURPkgs {

    curl --header "${1}" \
        --header "Accept: application/vnd.github.v3.raw" \
        --remote-name "https://api.github.com/repos/fluffehGit/${2}/contents/etc/pacman.d/aur.pkgs";
    yay -S --needed --nodiffmenu --answerclean All --removemake --cleanafter - < ./aur.pkgs.list --noconfirm;
    shred --verbose -u --zero --iterations=3 ./aur.pkgs.list;
}

function getSystemConfigs {
    echo "Pulling in configuration files...";

    mkdir /.rootdotfiles;
    git clone --bare https://${1}:x-oauth-basic@github.com/fluffehGit/${2}.git /.rootdotfiles;

    #CONFLICTING FILES TO BE ADDRESSED (possibly via gists?)

    git --git-dir=/.rootdotfiles --work-tree=/ checkout;
    git --git-dir=/.rootdotfiles --work-tree=/ config --local status.showUntrackedFiles no;
}

function setApps {

    echo "Enabling services...";

    # Snapper setup
    # Below two lines needed bc snapper create-config creates .snapshots folder
    umount --force /.snapshots;
    rm --recursive --force /.snapshots;

    snapper --config root create-config /;

    chmod 755 /.snapshots;
    systemctl enable snapper-timeline.timer;
    systemctl enable snapper-cleanup.timer;
    systemctl enable grub-btrfs.path

    # ClamAV setup
    freshclam;
    systemctl enable clamav-freshclam.service;

    # Fangfrisch database
    sudo --user=clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb;
    systemctl enable fangfrisch.timer;

    # TDB rkhunter

    systemctl enable bluetooth;
    systemctl enable tlp.service;

}
